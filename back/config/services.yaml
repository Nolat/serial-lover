# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    app.event.jwt_created_listener:
      class: App\EventListener\JWTCreatedListener
      arguments: [ '@request_stack' ]
      tags:
        - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    gesdinet.jwtrefreshtoken.refresh_token_manager:
      class: App\Doctrine\RefreshTokenManager
      public: true
      arguments: [ '@doctrine.orm.default_entity_manager', 'App\Entity\RefreshToken' ]

    kernel.listener.doctrine:
      class: App\EventListener\EditInfosEntityListener
      arguments:
        - "@security.token_storage"
        - "@doctrine.orm.entity_manager"
      tags:
        - { name: doctrine.event_listener, event: preFlush }
        - { name: doctrine.event_listener, event: preUpdate }
        - { name: doctrine.event_listener, event: prePersist }
        - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }
        - { name: kernel.event_listener, event: console.command, method: onCommand }
  # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
